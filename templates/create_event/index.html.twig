{% extends 'base.html.twig' %}

{% block title %}Accueil{% endblock %}

{% block body %}
    <nav class="navbar navbar-expand-lg bg-body-tertiary sticky-top" data-bs-theme="dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="{{ path('app_home') }}">ENI-Sortir</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse d-flex justify-content-end">
                <ul class="navbar-nav">
                    {% if is_granted('ROLE_ADMIN') %}
                        <li class="nav-item mx-3">
                            <a class="nav-link active" aria-current="page" href="{{ path('app_site') }}"> Sites </a>
                        </li>
                    {% endif %}
                    <li class="nav-item mx-3">
                        <a class="nav-link active" aria-current="page" href="{{ path('app_home') }}"> Accueil </a>
                    </li>
                    {% if not app.user %}
                        <li class="nav-item mx-3">
                            <a class="nav-link" href="{{ path('app_login') }}"> Connexion </a>
                        </li>
                    {% endif %}
                    {% if app.user %}
                        <li class="nav-item mx-3">
                            <a class="nav-link" href="{{ path('app_logout') }}"> Mon profil </a>
                        </li>
                        <li class="nav-item mx-3">
                            <a class="nav-link" href="{{ path('app_logout') }}"> Déconnexion </a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>
    <h1 class="text-center pt-5">Créer une sortie</h1>
    {{ form_start(formCreateEvent, { attr: { id: 'create_event' } }) }}
    {{ form_start(formCreateEventCity) }}
    {{ form_start(formCreateEventLocation) }}
        <div class="row container">
            <div class="col-md-5">
                {{ form_row(formCreateEvent.name) }}
                {{ form_row(formCreateEvent.startDateTime) }}
                {% if errorStartTime is not same as "" %}
                    {{ errorStartTime }}
                {% endif %}
                {{ form_row(formCreateEvent.endDateTime) }}
                {% if errorEndTime is not same as "" %}
                    {{ errorEndTime }}
                {% endif %}
                {{ form_row(formCreateEvent.limitDateInscription) }}
                {% if errorLimitTime is not same as "" %}
                    {{ errorLimitTime }}
                {% endif %}
                {{ form_row(formCreateEvent.nbInscriptionMax) }}
                {{ form_row(formCreateEvent.event_info) }}
            </div>
            <div class="col-md-5">
                <div class="mb-3">
                    <label for="create_event_user_city" class="form-label">Site</label>
                    <input type="text" id="create_event_user_city" name="create_event_user[city]" value="{{ cityName }}" disabled class="form-control">
                </div>
                {{ form_row(formCreateEventCity.name, { 'attr': {'class': 'city-select'} }) }}
                {{ form_row(formCreateEventLocation.name)}}
                {% if errorLocation is not same as "" %}
                    {{ errorLocation }}
                {% endif %}
                {{ form_row(formCreateEventLocation.street) }}
                {{ form_row(formCreateEventCity.zipcode, { 'attr': {'class': 'zipcode-input'} }) }}
                <div class="row save-publish d-flex">
                    {{ form_row(formCreateEvent._token) }}
                    {{ form_row(formCreateEventLocation._token) }}
                    {{ form_row(formCreateEventCity._token) }}
                    {{ form_row(formCreateEvent.save) }}
                    {{ form_row(formCreateEvent.publish) }}
                </div>
            </div>
        </div>
    {{ form_end(formCreateEventLocation) }}
    {{ form_end(formCreateEventCity) }}
    {{ form_end(formCreateEvent) }}

    <script>
            // Get references to the select and input elements
            const citySelect = document.getElementById('create_event_city_name');
            const zipcodeInput = document.getElementById('create_event_city_zipcode');
            const locationSelect = document.getElementById('create_event_location_name');
            const streetInput = document.getElementById('create_event_location_street');

            // Function to update the ZIP code input field based on the selected city
            function updateZipcodeAndStreet() {
            const selectedCity = citySelect.value;
            let selectedLocation = locationSelect.value;
            if (locationSelect.value === '') {
                selectedLocation = null
            }
            // Make an AJAX request to fetch the ZIP code
            fetch(`/public/get-zipcode/${selectedCity}-${selectedLocation}`)
            .then(response => response.json())
            .then(data => {
            zipcodeInput.value = data.zipcode;
            if (locationSelect.value === '') {
                streetInput.value = ''
            } else {
                streetInput.value = data.street;
            }

        });
        }

        // Fonction pour mettre à jour le champ de sélection de l'emplacement en fonction de la ville sélectionnée
        function updateLocationOptions() {
            const selectedCity = citySelect.value;

            // Make an AJAX request to fetch the locations based on the selected city
            fetch(`/public/get-locations/${selectedCity}`)
                .then(response => response.json())
                .then(data => {
                    // Clear existing options
                    locationSelect.innerHTML = '';

                    // Add new options based on the response
                    data.locations.forEach(location => {
                        const option = document.createElement('option');
                        option.value = location.id;
                        option.textContent = location.name;
                        locationSelect.appendChild(option);
                    });
                    updateZipcodeAndStreet();
                });
        }

        // Add an event listener to the city select field to update location options on change
        citySelect.addEventListener('change', updateLocationOptions);

        // Add an event listener to the city select field to update ZIP code and street on change
        citySelect.addEventListener('change', updateZipcodeAndStreet);
        locationSelect.addEventListener('change', updateZipcodeAndStreet);

        // Initialize location options when the page loads
        updateLocationOptions();
        // Initialize ZIP code when the page loads
        updateZipcodeAndStreet();
    </script>
{% endblock %}
