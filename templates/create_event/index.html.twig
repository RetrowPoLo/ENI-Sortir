{% extends 'base.html.twig' %}

{% block title %}{{ title }}{% endblock %}

{% block body %}
    <h1 class="text-center pt-5">{{ title }}</h1>
    <div class="container">
{#        {{ form_start(formCreateEvent, { attr: { id: 'create_event' } }) }}#}
{#        {{ form_start(formCreateEventCity) }}#}
{#        {{ form_start(formCreateEventLocation) }}#}
{#        <div class="row container">#}
{#            <div class="col-md-5">#}
{#                {{ form_row(formCreateEvent.name) }}#}
{#                {{ form_row(formCreateEvent.startDateTime) }}#}
{#                {% if errorStartTime is not same as "" %}#}
{#                    {{ errorStartTime }}#}
{#                {% endif %}#}
{#                {{ form_row(formCreateEvent.endDateTime) }}#}
{#                {% if errorEndTime is not same as "" %}#}
{#                    {{ errorEndTime }}#}
{#                {% endif %}#}
{#                {{ form_row(formCreateEvent.limitDateInscription) }}#}
{#                {% if errorLimitTime is not same as "" %}#}
{#                    {{ errorLimitTime }}#}
{#                {% endif %}#}
{#                {{ form_row(formCreateEvent.nbInscriptionMax) }}#}
{#                {{ form_row(formCreateEvent.event_info) }}#}
{#            </div>#}
{#            <div class="col-md-5">#}
{#                <div class="mb-3">#}
{#                    <label for="create_event_user_city" class="form-label">Site</label>#}
{#                    <input type="text" id="create_event_user_city" name="create_event_user[city]" value="{{ cityName }}" disabled class="border-0 disabled form-control">#}
{#                </div>#}
{#                {{ form_row(formCreateEventCity.name, { 'attr': {'class': 'city-select'} }) }}#}
{#                {{ form_row(formCreateEventLocation.name)}}#}
{#                {% if errorLocation is not same as "" %}#}
{#                    {{ errorLocation }}#}
{#                {% endif %}#}
{#                {{ form_row(formCreateEventLocation.street, { 'attr' : { 'class': 'border-0 disabled' } }) }}#}
{#                {{ form_row(formCreateEventCity.zipcode, { 'attr': {'class': 'border-0 zipcode-input disabled'} }) }}#}
{#                <div class="row save-publish d-flex">#}
{#                    {{ form_row(formCreateEvent._token) }}#}
{#                    {{ form_row(formCreateEventLocation._token) }}#}
{#                    {{ form_row(formCreateEventCity._token) }}#}
{#                    {{ form_row(formCreateEvent.save, { 'attr' : { 'class': 'btn-outline-main' } }) }}#}
{#                    {{ form_row(formCreateEvent.publish, { 'attr' : { 'class': 'btn-outline-warning' } }) }}#}
{#                </div>#}
{#            </div>#}
{#        </div>#}
{#        {{ form_end(formCreateEventLocation) }}#}
{#        {{ form_end(formCreateEventCity) }}#}
{#        {{ form_end(formCreateEvent) }}#}



    {{ form_start(formCreateEvent) }}
        <div class="row">
            <div class="col-md-5">
                {{ form_row(formCreateEvent.name) }}
                {{ form_row(formCreateEvent.startDateTime) }}
                {% if errorStartTime is not same as "" %}
                    {{ errorStartTime }}
                {% endif %}
                {{ form_row(formCreateEvent.endDateTime) }}
                {% if errorEndTime is not same as "" %}
                    {{ errorEndTime }}
                {% endif %}
                {{ form_row(formCreateEvent.limitDateInscription) }}
                {% if errorLimitTime is not same as "" %}
                    {{ errorLimitTime }}
                {% endif %}
                {{ form_row(formCreateEvent.nbInscriptionMax) }}
                {{ form_row(formCreateEvent.event_info) }}
            </div>
            <div class="col-md-5 offset-md-1">
                {{ form_row(formCreateEvent.locationSiteEvent) }}
                {{ form_row(formCreateEvent.eventLocation.city.name) }}
                {% if errorLocation is not same as "" %}
                    {{ errorLocation }}
                {% endif %}

                {{ form_label(formCreateEvent.eventLocation.name) }}
                {{ form_errors(formCreateEvent.eventLocation.name) }}
                <div class="d-flex justify-content-center">
                    <div class="input-group">
                        {{ form_widget(formCreateEvent.eventLocation.name) }}
                        <a class="btn btn-primary" href="{{ path('app_event_location_create') }}">
                            <img alt="add_event_location" src="{{ asset('./build/images/add2.png') }}">
                        </a>
                    </div>
                </div>
                {{ form_row(formCreateEvent.eventLocation.street) }}
                {{ form_row(formCreateEvent.eventLocation.city.zipcode) }}

                {{ form_row(formCreateEvent.save) }}
                {{ form_row(formCreateEvent.publish) }}
            </div>
        </div>
    {{ form_end(formCreateEvent) }}
    </div>

    <script>
        // Get references to the select and input elements
        const citySelect = document.getElementById('create_event_eventLocation_city_name');
        const zipcodeInput = document.getElementById('create_event_eventLocation_city_zipcode');
        const locationSelect = document.getElementById('create_event_eventLocation_name');
        const streetInput = document.getElementById('create_event_eventLocation_street');

        const base_url = window.location.origin;
        const pathArray = window.location.pathname.split( '/' );
        let completeBaseUrl = base_url;
        if(pathArray[1]!=='public'){
            completeBaseUrl = completeBaseUrl+'/'+pathArray[1]+'/'+pathArray[2];
        }
        else{
            completeBaseUrl = completeBaseUrl+'/'+pathArray[1];
        }

        // Function to update the ZIP code input field based on the selected city
        function updateZipcodeAndStreet() {
            const selectedCity = citySelect.value;
            let selectedLocation = locationSelect.value;
            if (locationSelect.value === '') {
                selectedLocation = null
            }
            // Make an AJAX request to fetch the ZIP code
            fetch(completeBaseUrl+`/get-zipcode/${selectedCity}-${selectedLocation}`)
                .then(response => response.json())
                .then(data => {
                    zipcodeInput.value = data.zipcode;
                    if (locationSelect.value === '') {
                        streetInput.value = ''
                    } else {
                        streetInput.value = data.street;
                    }

                });
        }

        // Fonction pour mettre à jour le champ de sélection de l'emplacement en fonction de la ville sélectionnée
        function updateLocationOptions() {
            const selectedCity = citySelect.value;

            // Make an AJAX request to fetch the locations based on the selected city
            fetch(completeBaseUrl+`/get-locations/${selectedCity}`)
                .then(response => response.json())
                .then(data => {
                    // Clear existing options
                    locationSelect.innerHTML = '';

                    // Add new options based on the response
                    data.locations.forEach(location => {
                        const option = document.createElement('option');
                        option.value = location.id;
                        option.textContent = location.name;
                        locationSelect.appendChild(option);
                    });
                    updateZipcodeAndStreet();
                });
        }

        // Add an event listener to the city select field to update location options on change
        citySelect.addEventListener('change', updateLocationOptions);

        // Add an event listener to the city select field to update ZIP code and street on change
        citySelect.addEventListener('change', updateZipcodeAndStreet);
        locationSelect.addEventListener('change', updateZipcodeAndStreet);

        // Initialize location options when the page loads
        updateLocationOptions();
        // Initialize ZIP code when the page loads
        updateZipcodeAndStreet();
    </script>
{% endblock %}
